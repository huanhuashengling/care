# Generated by Django 4.0.1 on 2022-01-09 08:30

from django.db import migrations, models

def forwards_sclasses_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Sclass = apps.get_model("picks", "Sclass")
    db_alias = schema_editor.connection.alias
    Sclass.objects.using(db_alias).bulk_create([
        Sclass(class_name="1", display_title="一年级一班", enter_school_year=2021, grade_name="一"),
        Sclass(class_name="2", display_title="一（2）班", enter_school_year=2021, grade_name="一"),
        Sclass(class_name="3", display_title="一（3）班", enter_school_year=2021, grade_name="一"),
        Sclass(class_name="4", display_title="育英三小一4班", enter_school_year=2021, grade_name="一"),
        Sclass(class_name="5", display_title="一（五）班", enter_school_year=2021, grade_name="一"),
        Sclass(class_name="6", display_title="育英三小一（6）班", enter_school_year=2021, grade_name="一"),
        Sclass(class_name="1", display_title="二（1）班", enter_school_year=2020, grade_name="二"),
        Sclass(class_name="2", display_title="育英三小二2班", enter_school_year=2020, grade_name="二"),
        Sclass(class_name="1", display_title="三年1班", enter_school_year=2019, grade_name="三"),
        Sclass(class_name="2", display_title="三（2）班", enter_school_year=2019, grade_name="三"),
        Sclass(class_name="1", display_title="育英三小四年级1班", enter_school_year=2018, grade_name="四"),
        Sclass(class_name="2", display_title="四年级2班", enter_school_year=2018, grade_name="四"),
    ])

def reverse_sclasses_func(apps, schema_editor):
    # forwards_func() creates two Sclass instances,
    # so reverse_func() should delete them.
    Sclass = apps.get_model("picks", "Sclass")
    db_alias = schema_editor.connection.alias
    Sclass.objects.using(db_alias).all().delete()


def forwards_evaluate_indexs_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    EvaluateIndex = apps.get_model("picks", "EvaluateIndex")
    db_alias = schema_editor.connection.alias
    EvaluateIndex.objects.using(db_alias).bulk_create([
        EvaluateIndex(index_txt="思想品德", index_desc="思想品德"),
        EvaluateIndex(index_txt="学业水平", index_desc="学业水平"),
        EvaluateIndex(index_txt="身心健康", index_desc="身心健康"),
        EvaluateIndex(index_txt="艺术素养", index_desc="艺术素养"),
        EvaluateIndex(index_txt="社会实践", index_desc="社会实践"),
    ])

def reverse_evaluate_indexs_func(apps, schema_editor):
    # forwards_func() creates two Rule instances,
    # so reverse_func() should delete them.
    EvaluateIndex = apps.get_model("picks", "EvaluateIndex")
    db_alias = schema_editor.connection.alias
    EvaluateIndex.objects.using(db_alias).all().delete()

def forwards_subjects_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Subject = apps.get_model("picks", "Subject")
    db_alias = schema_editor.connection.alias
    Subject.objects.using(db_alias).bulk_create([
        Subject(subject_name="语文"),
        Subject(subject_name="数学"),
        Subject(subject_name="英语"),
        Subject(subject_name="科学"),
        Subject(subject_name="音乐"),
        Subject(subject_name="体育"),
        Subject(subject_name="美术"),
        Subject(subject_name="信息"),
        Subject(subject_name="道法"),
        Subject(subject_name="综实"),
    ])

def reverse_subjects_func(apps, schema_editor):
    # forwards_func() creates two Rule instances,
    # so reverse_func() should delete them.
    Subject = apps.get_model("picks", "Subject")
    db_alias = schema_editor.connection.alias
    Subject.objects.using(db_alias).all().delete()

def forwards_teachers_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Teacher = apps.get_model("picks", "Teacher")
    db_alias = schema_editor.connection.alias
    Teacher.objects.using(db_alias).bulk_create([
        Teacher(teacher_name="语文", gender="", is_head_teacher="", subjects_id="", display_name=""),
    ])

def reverse_teachers_func(apps, schema_editor):
    # forwards_func() creates two Rule instances,
    # so reverse_func() should delete them.
    Teacher = apps.get_model("picks", "Teacher")
    db_alias = schema_editor.connection.alias
    Teacher.objects.using(db_alias).all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('picks', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(forwards_sclasses_func, reverse_sclasses_func),
        migrations.RunPython(forwards_evaluate_indexs_func, reverse_evaluate_indexs_func),
        migrations.RunPython(forwards_subjects_func, reverse_subjects_func),
        # migrations.RunPython(forwards_teachers_func, reverse_teachers_func)
    ]